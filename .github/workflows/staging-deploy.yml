name: Deploy Brezel.ai API to Staging

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [closed]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_COMPOSE_FILE: docker-compose.staging.yaml
  CONTAINER_NAME: google-maps-scraper-brezel-api-1

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Run tests
        run: |
          go test -v -race ./...

      - name: Build application
        run: |
          go build -o brezel-api .

  build-and-push:
    name: Build and Push Docker Image
    needs: [test]
    runs-on: ubuntu-latest
    if: |
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') && 
      (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true))
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=${{ github.ref_name }}-
            type=raw,value=staging,enable=${{ github.ref == 'refs/heads/develop' }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            GIT_COMMIT=${{ github.sha }}
            VERSION=${{ github.ref_name }}

  deploy-staging:
    name: Deploy to Staging Environment
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.brezel.ai
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.3
        env:
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          POSTGRES_PASSWORD: ${{ secrets.STAGING_POSTGRES_PASSWORD }}
          CLERK_API_KEY: ${{ secrets.STAGING_CLERK_API_KEY }}
          DOCKER_COMPOSE_FILE: ${{ env.DOCKER_COMPOSE_FILE }}
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          envs: REGISTRY,IMAGE_NAME,GITHUB_TOKEN,GITHUB_ACTOR,POSTGRES_PASSWORD,CLERK_API_KEY,DOCKER_COMPOSE_FILE,CONTAINER_NAME
          script_stop: true
          script: |
            set -e

            # Colors
            RED='\033[0;31m'
            GREEN='\033[0;32m'
            YELLOW='\033[1;33m'
            BLUE='\033[0;34m'
            NC='\033[0m'

            print_status() { echo -e "${GREEN}[INFO]${NC} $1"; }
            print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
            print_header() { echo -e "${BLUE}[DEPLOY]${NC} $1"; }

            print_header "üöÄ Starting deployment to staging"

            cd /home/${{ secrets.STAGING_USER }}/google-maps-scraper || exit 1

            CPU_CORES=$(nproc 2>/dev/null || echo "1")
            OPTIMAL_CONCURRENCY=$((CPU_CORES / 2))
            [ $OPTIMAL_CONCURRENCY -lt 1 ] && OPTIMAL_CONCURRENCY=1

            print_status "üîç CPU Cores: $CPU_CORES | Optimal Concurrency: $OPTIMAL_CONCURRENCY"

            print_status "üì• Pulling latest backend code..."
            git fetch origin
            git checkout develop
            git pull origin develop

            print_status "üì• Pulling latest frontend..."
            FRONTEND_DIR="../scraper-webapp"
            [ ! -d "$FRONTEND_DIR" ] && FRONTEND_DIR="../google-maps-scraper-webapp"
            if [ -d "$FRONTEND_DIR" ]; then
              cd "$FRONTEND_DIR"
              git fetch origin
              git checkout develop || git checkout main
              git pull
              cd -
            else
              print_warning "Frontend directory not found"
            fi

            print_status "üìù Setting up .env..."
            [ ! -f ".env" ] && cp .env.example .env
            cp .env .env.backup
            sed -i 's/host\.docker\.internal/172.17.0.1/g' .env
            [ ! -z "$POSTGRES_PASSWORD" ] && sed -i "s/^POSTGRES_PASSWORD=.*/POSTGRES_PASSWORD=$POSTGRES_PASSWORD/" .env && sed -i "s/scraper:.*@/scraper:$POSTGRES_PASSWORD@/" .env
            [ ! -z "$CLERK_API_KEY" ] && sed -i "s/^CLERK_API_KEY=.*/CLERK_API_KEY=$CLERK_API_KEY/" .env

            if [ $CPU_CORES -eq 1 ]; then
              sed -i "/^CONCURRENCY=/c\CONCURRENCY=1" .env || echo "CONCURRENCY=1" >> .env
            else
              sed -i 's/^CONCURRENCY=/#CONCURRENCY=/' .env
            fi

            print_status "üîê Docker login to GHCR"
            echo $GITHUB_TOKEN | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

            print_status "üèóÔ∏è Building backend Docker image"
            docker build --no-cache -t brezel-staging-test .

            if [ -d "$FRONTEND_DIR" ]; then
              print_status "üèóÔ∏è Building frontend Docker image"
              [ ! -f "$FRONTEND_DIR/.env.staging" ] && cp "$FRONTEND_DIR/.env.example" "$FRONTEND_DIR/.env.staging" && echo "NEXT_PUBLIC_API_URL=http://localhost:8080" >> "$FRONTEND_DIR/.env.staging"
              docker build --no-cache -t gmaps-webapp-staging "$FRONTEND_DIR"
            fi

            print_status "üõë Stopping containers"
            docker compose -f $DOCKER_COMPOSE_FILE down --remove-orphans || true

            print_status "üöÄ Starting with docker-compose"
            docker compose -f $DOCKER_COMPOSE_FILE --env-file .env up -d

            print_status "‚è≥ Waiting for services..."
            sleep 10

            print_status "üîç Health check"
            BACKEND_HEALTH_URL="http://localhost:8080/health"
            for i in {1..10}; do
              if curl --silent --fail "$BACKEND_HEALTH_URL"; then
                print_status "‚úÖ Backend is healthy"
                exit 0
              else
                print_warning "Attempt $i/10 failed"
                sleep 5
              fi
            done

            echo -e "${RED}[ERROR] Backend did not start properly${NC}"
            docker compose -f $DOCKER_COMPOSE_FILE logs
            exit 1
